{
	"abhijayrajvansh": {
		"prefix": "author",
		"body": [
		  "/*    यो न हृष्यति न द्वेष्टि न शोचति न काङ्क्षति। शुभाशुभपरित्यागी भक्तिमान्यः स मे प्रियः॥",
		  "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
		  " *    author:   abhijayrajvansh",
		  " *    created:  $CURRENT_DATE.$CURRENT_MONTH.$CURRENT_YEAR $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
		  "**/"
		],
		"description": "abhijayrajvansh"
	  
	}

	"Notes-Comment": {
		"prefix": "notes",
		"body": [
		  "/*",
		  "$0",
		  "*/"
		],
		"description": "Notes-Comment"
	}

	  
	"cpp basic": {
		"prefix": "cpp",
		"body": [
		  "/**",
		  " *    author:   abhijayrajvansh",
		  " *    created:  $CURRENT_DATE.$CURRENT_MONTH.$CURRENT_YEAR $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
		  "**/",
		  "#include <bits/stdc++.h>",
		  "using namespace std;",
		  "",
		  "constexpr char nl = '\\n';",
		  "",
		  "int main (){",
		  "    ios_base::sync_with_stdio(false);",
		  "    cin.tie(nullptr);",
		  "    $0",
		  "    return 0;    ",
		  "}",
		  ""
		],
		"description": "cpp basic"
	}
	
	"ABHIJAY_DEBUG": {
		"prefix": "debugger",
		"body": [
		  "",
		  "//यो न हृष्यति न द्वेष्टि न शोचति न काङ्क्षति। शुभाशुभपरित्यागी भक्तिमान्यः स मे प्रियः॥",
		  "template<class Fun> class rajvansh",
		  "{",
		  "Fun fun_;",
		  "public:",
		  "    template<class T> ",
		  "    explicit rajvansh(T &&fun): ",
		  "    fun_(std::forward<T>(fun)) {}",
		  "    template<class ...Args> ",
		  "    decltype(auto) operator()(Args &&...args) { ",
		  "",
		  "        return fun_(std::ref(*this), std::forward<Args>(args)...); ",
		  "    }",
		  "};",
		  "template<class Fun> ",
		  "decltype(auto) y_combinator(Fun &&fun) {",
		  "",
		  "    return rajvansh<std::decay_t<Fun>>(std::forward<Fun>(fun)); ",
		  "}",
		  "template<typename A, typename B> ",
		  "ostream& operator<<(ostream &os, const pair<A, B> &p) {",
		  "",
		  "    return os << '(' << p.first << \", \" << p.second << ')'; ",
		  "}",
		  "template<typename T_container, typename T = typename enable_if<!is_same",
		  "",
		  "<T_container, string>::value, typename T_container::value_type>::type> ",
		  "ostream& operator<<(ostream &os, const T_container &v) { ",
		  "",
		  "    os << '{'; string sep; ",
		  "    for (const T &x : v) ",
		  "        os << sep << x, sep = \", \"; ",
		  "",
		  "    return os << '}'; ",
		  "}",
		  "",
		  "void dbg_out() { cerr << endl; }",
		  "template<typename Head, typename... Tail> ",
		  "",
		  "void dbg_out(Head H, Tail... T) { ",
		  "    cerr << ' ' << H; dbg_out(T...); ",
		  "}",
		  "",
		  "#ifdef ABHIJAY_DEBUG",
		  "#define deb(...) cerr << \"[\"<< #__VA_ARGS__ << \"]:\", dbg_out(__VA_ARGS__);",
		  "#else",
		  "#define deb(...)",
		  "#endif",
		  ""
		],
		"description": "ABHIJAY_DEBUG"
	}

	"File Handling Debug": {
	"prefix": "localio",
	"body": [
		"",
		"// TODO: Make sure to comment out before submitting",
		"freopen(\"local.in\", \"r\", stdin); ",
		"freopen(\"local.out\", \"w\", stdout);",
		""
	],
	"description": "File Handling Debug"
	}

	"Shows Execution Time": {
		"prefix": "timetaken",
		"body": [
		  "",
		  "cerr << fixed << setprecision(2); cerr << \"\\nExecution Time: \" << (float)clock() / CLOCKS_PER_SEC << \" secs\" << '\\n'; ",
		  ""
		],
		"description": "Shows Execution Time"
	}


	"CP_TEMPLATE": {
		"prefix": "abhijay",
		"body": [
		  "/**   ",
		  " *    author:  abhijayrajvansh",
		  " *    created: 29.07.2022 20:40:17",
		  "**/",
		  "#include <bits/stdc++.h>",
		  "#define int int64_t",
		  "#define tatakae() int tests = 1; if (TT) cin >> tests; for (int i = 1; i <= tests; i++) { run_case(i); }",
		  "using namespace std;",
		  "",
		  "constexpr char nl = '\\n'; ",
		  "",
		  "// यो न हृष्यति न द्वेष्टि न शोचति न काङ्क्षति। शुभाशुभपरित्यागी भक्तिमान्यः स मे प्रियः॥",
		  "template<class Fun> class rajvansh",
		  "{",
		  "Fun fun_;",
		  "public:",
		  "    template<class T> ",
		  "    explicit rajvansh(T &&fun): ",
		  "    fun_(std::forward<T>(fun)) {}",
		  "    template<class ...Args> ",
		  "    decltype(auto) operator()(Args &&...args) { ",
		  "",
		  "        return fun_(std::ref(*this), std::forward<Args>(args)...); ",
		  "    }",
		  "};",
		  "template<class Fun> ",
		  "decltype(auto) y_combinator(Fun &&fun) {",
		  "",
		  "    return rajvansh<std::decay_t<Fun>>(std::forward<Fun>(fun)); ",
		  "}",
		  "template<typename A, typename B> ",
		  "ostream& operator<<(ostream &os, const pair<A, B> &p) {",
		  "",
		  "    return os << '(' << p.first << \", \" << p.second << ')'; ",
		  "}",
		  "template<typename T_container, typename T = typename enable_if<!is_same",
		  "",
		  "<T_container, string>::value, typename T_container::value_type>::type> ",
		  "ostream& operator<<(ostream &os, const T_container &v) { ",
		  "",
		  "    os << '{'; string sep; ",
		  "    for (const T &x : v) ",
		  "        os << sep << x, sep = \", \"; ",
		  "",
		  "    return os << '}'; ",
		  "}",
		  "",
		  "void dbg_out() { cerr << endl; }",
		  "template<typename Head, typename... Tail> ",
		  "",
		  "void dbg_out(Head H, Tail... T) { ",
		  "    cerr << ' ' << H; dbg_out(T...); ",
		  "}",
		  "",
		  "#ifdef ABHIJAY_DEBUG",
		  "#define deb(...) cerr << \"[\"<< #__VA_ARGS__ << \"]:\", dbg_out(__VA_ARGS__);",
		  "#else",
		  "#define deb(...)",
		  "#endif",
		  "",
		  "bool TT = true, print_case_no = false;",
		  "",
		  "void run_case(int tc){",
		  "    // TODO: make sure all variables get reset.",
		  "}",
		  "",
		  "int32_t main() {",
		  "    ios_base::sync_with_stdio(false);",
		  "#ifndef ABHIJAY_DEBUG",
		  "    cin.tie(nullptr); ",
		  "    freopen(\"debug.err\", \"w\", stderr);",
		  "#endif",
		  "    tatakae();",
		  "}",
		  "",
		  "",
		  "",
		  "",
		  "",
		  ""
		],
		"description": "CP_TEMPLATE"
	}

	//   COMPETITIVE PROGRAMMING - > Snippets

	// Some quick printing...

	"print YES ": {
		"prefix": "pyes;",
		"body": [
		  "cout << \"YES\" << nl;"
		],
		"description": "print YES "  
	}

	"print NO ": {
		"prefix": "pno;",
		"body": [
		  "cout << \"NO\" << nl;"
		],
		"description": "print NO "  
	}

	"print answer with case no.": {
		"prefix": "print-case#",
		"body": [
		  "cout << \"Case #\" << tc << \": \"; ",
		  "",
		  "$0"
		],
		"description": "print answer with case no."
	}

	"N size Vector Input": {
		"prefix": "nvec",
		"body": [
		  "int n;",
		  "cin >> n;",
		  "",
		  "vector<int64_t> a(n);",
		  "    ",
		  "for (int i = 0; i < n; i++) {",
		  "    cin >> a[i];",
		  "}"
		],
		"description": "N size Vector Input"
	}

	"N Size String input": {
		"prefix": "nstring",
		"body": [
		  "int n; string s;",
		  "cin >> n >> s;",
		  "",
		],
		"description": "N Size String input"
	}

	// STL and Worlflow

	"For Loop For Repetition": {
		"prefix": "rep",
		"body": [
		  "",
		  "for (int i = 0; i < $1; i++) {",
		  "    $0",
		  "}",
		  ""
		],
		"description": "For Loop For Repetition"
	}

	"iterative traversal": {
		"prefix": "trav",
		"body": [
		  "for (auto &a : $1){",
		  "    $0",
		  "}"
		],
		"description": "iterative traversal"
	}

	"Begin -> End all Itetrations": {
		"prefix": "all",
		"body": [
		  "$0.begin(), $0.end()"
		],
		"description": "Begin -> End all Itetrations"
	}

	"integer vector": {
		"prefix": "vecint",
		"body": [
		  "vector<int64_t> $0"
		],
		"description": "integer vector"
	}

	"read stl": {
		"prefix": "readvector-stl",
		"body": [
		  "",
		  "for (int i = 0; i < n; i++) {",
		  "    cin >> $0[i];",
		  "}",
		  ""
		],
		"description": "read stl"
	}

	"printing vector using loop": {
		"prefix": "print-vector",
		"body": [
		  "",
		  "for(int i = 0; i < (int)$0.size(); i++){",
		  "	cout << $0[i] << \" \";",
		  "}",
		  "cout << '\\n';",
		  ""
		],
		"description": "printing vector using loop"
	}



	//////////////////////////////////////////////////////////////////  CODE - Mathematical functions  ///////////////////////////////////////////////////////////////

	"GCD and LCM": {
		"prefix": "include-gcd-lcm",
		"body": [
		  "",
		  "int gcd(int a, int b){",
		  "    if(b == 0) {",
		  "        return a;",
		  "    }",
		  "",
		  "    return gcd(b, a % b);",
		  "}",
		  "",
		  "int lcm(int a, int b){",
		  "    int hcf = gcd(a, b);",
		  "",
		  "    return (a / hcf) * (b / hcf) * hcf;",
		  "}",
		  ""
		],
		"description": "GCD and LCM"
	}

	"compute factorial of n": {
		"prefix": "include-factorial",
		"body": [
		  "",
		  "int fact(int n){",
		  "    return(n == 1 ? n : n * fact(n - 1));",
		  "}",
		  ""
		],
		"description": "compute factorial of n"
	}


	//////////////////////////////////////////////////////////////////  CODE - Snippets and Fucntions  ///////////////////////////////////////////////////////////////

	"Rotating string by element from 1.->n-1 or from n-1.->1": {
		"prefix": "rotate-string-left-right",
		"body": [
		  "",
		  "void rotateRight(string &s, int k){",
		  "    int n = s.size();",
		  "",
		  "    for(int time = 0; time < k; time++){",
		  "        string newly = \"\";",
		  "        for(int i = 1; i < n; i++){",
		  "            newly += s[i];",
		  "        }",
		  "        newly += s[0];",
		  "        s = newly;",
		  "    }",
		  "}",
		  "",
		  "void rotateLeft(string &s, int k){",
		  "    int n = s.size();",
		  "",
		  "    for(int time = 0; time < k; time++){",
		  "        string newly = \"X\";",
		  "        newly[0] = s[n - 1];",
		  "        for(int i = 0; i < n - 1; i++){",
		  "            newly += s[i];",
		  "        }",
		  "        s = newly;",
		  "    }",
		  "}",
		  ""
		],
		"description": "Rotating string by element from 1.->n-1 or from n-1.->1"
	}

	"integer to vector convertion": {
		"prefix": "include-integer-to-vector",
		"body": [
		  "",
		  "vector<int> int_to_vector(int n){",
		  "    vector<int> ans;",
		  "    ",
		  "    while(n != 0){",
		  "        int ld = n % 10;",
		  "        ans.push_back(ld);",
		  "        n /= 10;",
		  "    }",
		  "",
		  "    reverse(ans.begin(), ans.end());",
		  "    return ans;",
		  "}",
		  ""
		],
		"description": "integer to vector convertion"
	}


	"to check if string is palindrome or not": {
		"prefix": "include-isPalindrome",
		"body": [
		  "bool isPalindrome(string &s){",
		  "    int i = 0, j = s.size() - 1;",
		  "    while(i < j){",
		  "        if(s[i] == s[j]){",
		  "            i++;",
		  "            j--;",
		  "        }",
		  "        else{",
		  "            return false;",
		  "        }",
		  "    }",
		  "    return true;",
		  "}",
		  ""
		],
		"description": "to check if string is palindrome or not"
	}

	"distinct elements in vector": {
		"prefix": "include-isdistincevector",
		"body": [
		  "",
		  "bool isDistinctVector(vector<int> &arr){",
		  "    int n = arr.size();",
		  "",
		  "    for(int i = 0; i < n; i++){",
		  "        for(int j = i + 1; j < n; j++){",
		  "            if(arr[i] == arr[j]){",
		  "                return false;",
		  "            }",
		  "        }",
		  "    }",
		  "    return true;",
		  "}",
		  ""
		],
		"description": "distinct elements in vector"
	}

	"Boolean values to check vowel or consonants": {
		"prefix": "include-isvowel-isconsonant",
		"body": [
		  "",
		  "bool isVowel(char c){",
		  "    if (c=='a'||c=='e'||c=='i'||c=='o'||c=='u'||",
		  "       c=='A'||c=='E'||c=='I'||c=='O'||c=='U'){",
		  "",
		  "        return true;",
		  "    }",
		  "",
		  "    return false;",
		  "}",
		  "",
		  "bool isConsonant(char c){",
		  "    return (isVowel(c) ? false : true);",
		  "}",
		  ""
		],
		"description": "Boolean values to check vowel or consonants"
	  }

	  

	"printing vector": {
		"prefix": "include-output-vector",
		"body": [
		  "",
		  "template <class T>",
		  "void output_vector(vector<T>& arr){",
		  "    int n = arr.size();",
		  "",
		  "    for (int i = 0; i < n; i++) {",
		  "        cout << arr[i] << \" \";",
		  "    }",
		  "",
		  "    cout << nl;",
		  "}",
		  ""
		],
		"description": "printing vector"
	}

	"computer all permutations of elements in an array / vector": {
		"prefix": "include-compute-permutations",
		"body": [
		  "",
		  "void compute_permutations(vector<int64_t> a, int l, int r, vector<vector<int64_t>> &ans) ",
		  "{ ",
		  "    if (l == r) {",
		  "        ans.push_back(a);",
		  "    }",
		  "    else",
		  "    { ",
		  "        for (int i = l; i <= r; i++) { ",
		  "            swap(a[l], a[i]); ",
		  "            compute_permutations(a, l+1, r, ans); ",
		  "            swap(a[l], a[i]); ",
		  "        } ",
		  "    } ",
		  "}",
		  ""
		],
		"description": "computer all permutations of elements in an array / vector"
	}

	"count total digits in integer": {
		"prefix": "include-count-digits-in-integer",
		"body": [
		  "",
		  "int count_digits_in_int(int n){",
		  "    int ans = 0;",
		  "",
		  "    while(n != 0){",
		  "        int ld = n % 10;",
		  "        ans++;",
		  "        n /= 10;",
		  "    }",
		  "    return ans;",
		  "}",
		  ""
		],
		"description": "count total digits in integer"
	}

	"prefix sum and suffix sum": {
		"prefix": "include-prefixsum-suffixsum",
		"body": [
		  "",
		  "void prefixSum_suffixSum(int a[], int prefix[], int suffix[], int n){",
		  "    prefix[0] = a[0];",
		  "",
		  "    for(int i = 1; i < n; i++){",
		  "        prefix[i] += prefix[i - 1] + a[i];",
		  "    }",
		  "",
		  "    suffix[n - 1] = a[n - 1];",
		  "",
		  "    for(int i = n - 2; i >= 0; i--){",
		  "        suffix[i] += suffix[i + 1] + a[i];",
		  "    }",
		  "}",
		  ""
		],
		"description": "prefix sum and suffix sum"
	}

}