{
	"abhijayrajvansh": {
		"prefix": "author",
		"body": [
		  "/*    यो न हृष्यति न द्वेष्टि न शोचति न काङ्क्षति। शुभाशुभपरित्यागी भक्तिमान्यः स मे प्रियः॥",
		  "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
		  " *    author:   abhijayrajvansh (https://codeforces.com/profile/abhijayrajvansh)",
		  " *    created:  $CURRENT_DATE.$CURRENT_MONTH.$CURRENT_YEAR $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
		  "**/"
		],
		"description": "abhijayrajvansh"
	  
	}

	"Notes-Comment": {
		"prefix": "notes",
		"body": [
		  "/*",
		  "$0",
		  "*/"
		],
		"description": "Notes-Comment"
	  }

	  
	"cpp basic": {
		"prefix": "cpp",
		"body": [
		  "/*    यो न हृष्यति न द्वेष्टि न शोचति न काङ्क्षति। शुभाशुभपरित्यागी भक्तिमान्यः स मे प्रियः॥",
		  "``````````````````````````````````````````````````````````````````",
		  " *    author:   abhijayrajvansh (https://codeforces.com/profile/abhijayrajvansh)",
		  " *    created:  $CURRENT_DATE.$CURRENT_MONTH.$CURRENT_YEAR $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
		  "**/",
		  "#include <bits/stdc++.h>",
		  "using namespace std;",
		  "",
		  "constexpr char nl = '\\n';",
		  "",
		  "int main (){",
		  "    ios_base::sync_with_stdio(false);",
		  "    cin.tie(NULL);",
		  "    $0",
		  "    return 0;    ",
		  "}",
		  ""
		],
		"description": "cpp basic"
	}
	"ABHIJAY_ULTIMATE_DEBUGGER": {
		"prefix": "debugger",
		"body": [
		  "",
		  "template<class Fun> class y_combinator_result {",
		  "    Fun fun_;",
		  "public:",
		  "    template<class T> explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {}",
		  "    template<class ...Args> decltype(auto) operator()(Args &&...args) { return fun_(std::ref(*this), std::forward<Args>(args)...); }",
		  "};",
		  "template<class Fun> decltype(auto) y_combinator(Fun &&fun) { return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun)); }",
		  "",
		  "template<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << \", \" << p.second << ')'; }",
		  "template<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream& operator<<(ostream &os, const T_container &v) { os << '{'; string sep; for (const T &x : v) os << sep << x, sep = \", \"; return os << '}'; }",
		  "",
		  "void dbg_out() { cerr << endl; }",
		  "template<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }",
		  "#ifdef ABHIJAY_DEBUG",
		  "#define deb(...) cerr << \"[\"<< #__VA_ARGS__ << \"]:\", dbg_out(__VA_ARGS__);",
		  "#else",
		  "#define deb(...)",
		  "#endif",
		  "",
		],
		"description": "ABHIJAY_ULTIMATE_DEBUGGER"
	  }
	  "CP TEMPLATE": {
		"prefix": "abhijay",
		"body": [
		  "/*    यो न हृष्यति न द्वेष्टि न शोचति न काङ्क्षति। शुभाशुभपरित्यागी भक्तिमान्यः स मे प्रियः॥",
		  "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
		  " *    author:   abhijayrajvansh (https://codeforces.com/profile/abhijayrajvansh)",
		  " *    created:  $CURRENT_DATE.$CURRENT_MONTH.$CURRENT_YEAR $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
		  "**/",
		  "#include <bits/stdc++.h>",
		  "using namespace std;",
		  "",
		  "typedef long double ld;",
		  "typedef unsigned long long ull;",
		  "#define int long long",
		  "",
		  "template<class Fun> class y_combinator_result {",
		  "    Fun fun_;",
		  "public:",
		  "    template<class T> explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {}",
		  "    template<class ...Args> decltype(auto) operator()(Args &&...args) { return fun_(std::ref(*this), std::forward<Args>(args)...); }",
		  "};",
		  "template<class Fun> decltype(auto) y_combinator(Fun &&fun) { return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun)); }",
		  "",
		  "template<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << \", \" << p.second << ')'; }",
		  "template<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream& operator<<(ostream &os, const T_container &v) { os << '{'; string sep; for (const T &x : v) os << sep << x, sep = \", \"; return os << '}'; }",
		  "",
		  "void dbg_out() { cerr << endl; }",
		  "template<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }",
		  "#ifdef ABHIJAY_DEBUG",
		  "#define deb(...) cerr << \"[\"<< #__VA_ARGS__ << \"]:\", dbg_out(__VA_ARGS__);",
		  "#else",
		  "#define deb(...)",
		  "#endif",
		  "",
		  "constexpr char nl = '\\n';",
		  "",
		  "void run_case(){",
		  "    ",
		  "}",
		  "",
		  "int32_t main() {",
		  "    ios_base::sync_with_stdio(false);",
		  "#ifdef ABHIJAY_DEBUG",
		  "    cin.tie(NULL);",
		  "#else",
		  "    freopen(\"debug_error.txt\", \"w\", stderr);",
		  "#endif",
		  "",
		  "    int TEST_CASES = 1; cin >> TEST_CASES;",
		  "",
		  "    for(int i = 1; i <= TEST_CASES; i++){",
		  "        // cerr << \"Case #\" << i << \": \";",
		  "        run_case();",
		  "    }",
		  "}"
		  "",
		],
		"description": "CP TEMPLATE"
	  }

	//   COMPETITIVE PROGRAMMING - > Snippets
	
	// STL Worl flow
	"Begin -> End all Itetrations": {
		"prefix": "all",
		"body": [
		  "$0.begin(), $0.end()"
		],
		"description": "Begin -> End all Itetrations"
	}

	"integer vector": {
		"prefix": "vi",
		"body": [
		  "vector<int> $0"
		],
		"description": "integer vector"
	}



	//////////////////////////////////////////////////////////////////  CODE - Snippets  ///////////////////////////////////////////////////////////////

	"integer to vector convertion": {
		"prefix": "include-integer-to-vector",
		"body": [
		  "",
		  "vector<int> int_to_vector(int n){",
		  "    vector<int> ans;",
		  "    ",
		  "    while(n != 0){",
		  "        int ld = n % 10;",
		  "        ans.push_back(ld);",
		  "        n /= 10;",
		  "    }",
		  "",
		  "    reverse(ans.begin(), ans.end());",
		  "    return ans;",
		  "}",
		  ""
		],
		"description": "integer to vector convertion"
	}

	"distinct elements in vector": {
		"prefix": "include-isdistincevector",
		"body": [
		  "",
		  "bool isDistinctVector(vector<int> &arr){",
		  "    int n = arr.size();",
		  "",
		  "    for(int i = 0; i < n; i++){",
		  "        for(int j = i + 1; j < n; j++){",
		  "            if(arr[i] == arr[j]){",
		  "                return false;",
		  "            }",
		  "        }",
		  "    }",
		  "    return true;",
		  "}",
		  ""
		],
		"description": "distinct elements in vector"
	}

	"printing vector": {
		"prefix": "include-output-vector",
		"body": [
		  "",
		  "template <class T>",
		  "void output_vector(vector<T>& arr){",
		  "    int n = arr.size();",
		  "    for(int i = 0; i < n; i++){",
		  "        cout << arr[i] << \" \";",
		  "    }",
		  "    cout << nl;",
		  "}",
		  ""
		],
		"description": "printing vector"
	}

	"count total digits in integer": {
		"prefix": "include-count-digits-in-integer",
		"body": [
		  "",
		  "int count_digits_in_int(int n){",
		  "    int ans = 0;",
		  "",
		  "    while(n != 0){",
		  "        int ld = n % 10;",
		  "        ans++;",
		  "        n /= 10;",
		  "    }",
		  "    return ans;",
		  "}",
		  ""
		],
		"description": "count total digits in integer"
	  }
}