{
	"abhijayrajvansh": {
		"prefix": "author",
		"body": [
		  "/*    यो न हृष्यति न द्वेष्टि न शोचति न काङ्क्षति। शुभाशुभपरित्यागी भक्तिमान्यः स मे प्रियः॥",
		  "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
		  " *    author:   abhijayrajvansh",
		  " *    created:  $CURRENT_DATE.$CURRENT_MONTH.$CURRENT_YEAR $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
		  "**/"
		],
		"description": "abhijayrajvansh"
	  
	}

	"Notes-Comment": {
		"prefix": "notes",
		"body": [
		  "/*",
		  "$0",
		  "*/"
		],
		"description": "Notes-Comment"
	}

	  
	"cpp basic": {
		"prefix": "cpp",
		"body": [
		  "/**",
		  " *    author:   abhijayrajvansh",
		  " *    created:  $CURRENT_DATE.$CURRENT_MONTH.$CURRENT_YEAR $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
		  "**/"
		  "#include <bits/stdc++.h>",
		  "using namespace std;",
		  "",
		  "int main (){",
		  "    $0",
		  "    return 0;    ",
		  "}",
		  ""
		],
		"description": "cpp basic"
	}
	
	"Tracing DS and Points / IO Debugging": {
		"prefix": "debugger",
		"body": [
		  "",
		  "//यो न हृष्यति न द्वेष्टि न शोचति न काङ्क्षति। शुभाशुभपरित्यागी भक्तिमान्यः स मे प्रियः॥",
		  "template<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ",
		  "istream& operator >> (istream &is, T_container &v) { ",
		  "   for(T &x : v) is >> x; return is;",
		  "}",
		  "",
		  "template<typename A, typename B> ",
		  "ostream& operator<<(ostream &os, const pair<A, B> &p) { ",
		  "   return os << '(' << p.first << \", \" << p.second << ')'; ",
		  "}",
		  " ",
		  "template<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ",
		  "ostream& operator << (ostream &os, const T_container &v) { ",
		  "   os << '{'; string sep; ",
		  "   for (const T &x : v) os << sep << x, sep = \", \"; ",
		  "   return os << '}'; ",
		  "}",
		  "",
		  "template<class P, class Q = vector<P>, class R = less<P> > ostream& operator << (ostream& out, priority_queue<P, Q, R> const& M){",
		  "    static priority_queue<P, Q, R> U;",
		  "    U = M;",
		  "    out << \"{ \";",
		  "    while(!U.empty())",
		  "        out << U.top() << \" \", U.pop();",
		  "    return (out << \"}\");",
		  "}",
		  "",
		  "template<class P> ostream& operator << (ostream& out, queue<P> const& M){",
		  "    static queue<P> U;",
		  "    U = M;",
		  "    out << \"{\"; string sep;",
		  "    while(!U.empty()){",
		  "        out << sep << U.front(); sep = \", \"; U.pop();",
		  "    }",
		  "    return (out << \"}\");",
		  "}",
		  "",
		  "#ifdef ABHIJAY_DEBUG",
		  "#define deb(...) __f(#__VA_ARGS__, __VA_ARGS__);",
		  "",
		  "template <typename Arg1>",
		  "void __f(const char* name, Arg1&& arg1){",
		  "    cerr << name << \" : \" << arg1 << endl;",
		  "}",
		  "",
		  "template <typename Arg1, typename... Args>",
		  "void __f(const char* names, Arg1&& arg1, Args&&... args){",
		  "        int count_open = 0, len = 1;",
		  "        for(int k = 1; ; ++k){",
		  "        char cur = *(names + k);",
		  "        count_open += (cur == '(' ? 1 : (cur == ')' ? -1: 0));",
		  "        if (cur == ',' && count_open == 0){",
		  "            const char* comma = names + k;",
		  "            cerr.write(names, len) << \" : \" << arg1 << \" | \";",
		  "            __f(comma + 1, args...);",
		  "            return;",
		  "        }",
		  "        len = (cur == ' ' ? len : k + 1);",
		  "    }",
		  "}",
		  "#else",
		  "    #define deb(...) ",
		  "#endif",
		  ""
		],
		"description": "Tracing DS and Points / IO Debugging"
	}

	"File Handling Debug": {
	"prefix": "localio",
	"body": [
		"",
		"// TODO: Make sure to comment out before submitting",
		"freopen(\"local.in\", \"r\", stdin); ",
		"freopen(\"local.out\", \"w\", stdout);",
		""
	],
	"description": "File Handling Debug"
	}

	"CP_TEMPLATE": {
		"prefix": "abhijay",
		"body": [
		  "/**   ",
		  " *    author:  abhijayrajvansh",
		  " *    created: $CURRENT_DATE.$CURRENT_MONTH.$CURRENT_YEAR $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
		  "**/",
		  "#ifndef ABHIJAY_DEBUG",
		  "    #pragma GCC optimize(\"O3,unroll-loops\")",
		  "    // #pragma GCC target(\"avx,avx2,sse4.2,bmi,bmi2,popcnt,lzcnt\") // Gives SIGILL on SPOJ",
		  "#endif",
		  "",
		  "#include <bits/stdc++.h>",
		  "using namespace std;",
		  "",
		  "#define int int64_t // avoiding int32_t overflow",
		  "",
		  "// procrastination is not an option! ",
		  "#define tatakae() std::cout << std::fixed << std::setprecision(12); std::cerr << std::fixed << std::setprecision(3); auto start = std::chrono::high_resolution_clock::now(); int tests = 1; if (TT) cin >> tests; for (int i = 1; i <= tests; i++) { if(print_case_no) cout << \"Case #\" << i << \": \"; run_case(i); } if (time_taken) { auto stop = std::chrono::high_resolution_clock::now(); long double duration = std::chrono::duration_cast<std::chrono::nanoseconds>(stop - start).count(); std::cerr << \"\\nTime taken : \" << duration / 1e9 << \" seconds\" << std::endl; }",
		  "",
		  "constexpr char nl = '\\n'; // a slave of one's habits ",
		  "",
		  "//यो न हृष्यति न द्वेष्टि न शोचति न काङ्क्षति। शुभाशुभपरित्यागी भक्तिमान्यः स मे प्रियः॥",
		  "template<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ",
		  "istream& operator >> (istream &is, T_container &v) { ",
		  "   for(T &x : v) is >> x; return is;",
		  "}",
		  "",
		  "template<typename A, typename B> ",
		  "ostream& operator<<(ostream &os, const pair<A, B> &p) { ",
		  "   return os << '(' << p.first << \", \" << p.second << ')'; ",
		  "}",
		  " ",
		  "template<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ",
		  "ostream& operator << (ostream &os, const T_container &v) { ",
		  "    os << '{'; string sep; ",
		  "    for (const T &x : v) ",
		  "        os << sep << x, sep = \", \"; ",
		  "    return os << '}'; ",
		  "}",
		  "",
		  "template<class P, class Q = vector<P>, class R = less<P> > ostream& operator << (ostream& out, priority_queue<P, Q, R> const& M){",
		  "    static priority_queue<P, Q, R> U;",
		  "    U = M;",
		  "    out << \"{ \";",
		  "    while(!U.empty())",
		  "        out << U.top() << \" \", U.pop();",
		  "    return (out << \"}\");",
		  "}",
		  "",
		  "template<class P> ostream& operator << (ostream& out, queue<P> const& M){",
		  "    static queue<P> U;",
		  "    U = M;",
		  "    out << \"{\"; string sep;",
		  "    while(!U.empty()){",
		  "        out << sep << U.front(); sep = \", \"; U.pop();",
		  "    }",
		  "    return (out << \"}\");",
		  "}",
		  "",
		  "#ifdef ABHIJAY_DEBUG",
		  "#define deb(...) __f(#__VA_ARGS__, __VA_ARGS__);",
		  "",
		  "template <typename Arg1>",
		  "void __f(const char* name, Arg1&& arg1){",
		  "    cerr << name << \" : \" << arg1 << endl;",
		  "}",
		  "",
		  "template <typename Arg1, typename... Args>",
		  "void __f(const char* names, Arg1&& arg1, Args&&... args){",
		  "    int count_open = 0, len = 1;",
		  "",
		  "    for(int k = 1; ; ++k){",
		  "        char cur = *(names + k);",
		  "        count_open += (cur == '(' ? 1 : (cur == ')' ? -1: 0));",
		  "",
		  "        if (cur == ',' && count_open == 0){",
		  "            const char* comma = names + k;",
		  "            cerr.write(names, len) << \" : \" << arg1 << \" | \";",
		  "            __f(comma + 1, args...);",
		  "            return;",
		  "        }",
		  "",
		  "        len = (cur == ' ' ? len : k + 1);",
		  "    }",
		  "}",
		  "",
		  "#else",
		  "#define deb(...) ",
		  "#endif",
		  "",
		  "bool print_case_no = false, time_taken = false, TT = true;",
		  "",
		  "void run_case(int tc){",
		  "    $0",
		  "}",
		  "",
		  "int32_t main() {",
		  "    ios::sync_with_stdio(false);",
		  "#ifndef ABHIJAY_DEBUG",
		  "    cin.tie(nullptr); ",
		  "    freopen(\"error.flush\", \"w\", stderr);",
		  "#endif",
		  "    tatakae(); // be strong enough to be someone who even the demons would fear!",
		  "}"
		],
		"description": "CP_TEMPLATE"
	}

	//   COMPETITIVE PROGRAMMING - > Snippets

	"policily-based-data-structure": {
		"prefix": "include-policy-based-ds",
		"body": [
		  "",
		  "#include <ext/pb_ds/assoc_container.hpp>",
		  "#include <ext/pb_ds/tree_policy.hpp>",
		  "using namespace __gnu_pbds;",
		  "",
		  "template<class T> ",
		  "using ordered_set = tree<T, null_type, std::less<T>, rb_tree_tag, tree_order_statistics_node_update> ;",
		  "",
		  "template<class key, class value, class cmp = std::less<key>>",
		  "using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;",
		  "// find_by_order(k)  returns iterator to kth element starting from 0;",
		  "// order_of_key(k) returns count of elements strictly smaller than k;",
		  "",
		  "template<class T>",
		  "using min_heap = std::priority_queue<T, std::vector<T>, std::greater<T> >; ",
		  ""
		],
		"description": "policily-based-data-structure"
	}

	"best random int generator in a range": {
		"prefix": "include-rng-generator",
		"body": [
		  "",
		  "// probably the best rng generator till now",
		  "inline int64_t getRandomNumber(int64_t l = LLONG_MIN, int64_t r = LLONG_MAX){",
		  "    static std::mt19937_64 rng(std::chrono::steady_clock::now().time_since_epoch().count());",
		  "    std::uniform_int_distribution<int64_t> generator(l,r);",
		  "    return generator(rng);",
		  "}",
		  ""
		],
		"description": "best random int generator in a range"
	}

	"safe_unordered_hash_map": {
		"prefix": "include-safe_map-custom_hash",
		"body": [
		  "",
		  "struct custom_hash { ",
		  "    static uint64_t splitmix64(uint64_t x) { ",
		  "        x += 0x9e3779b97f4a7c15;",
		  "        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;",
		  "        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;",
		  "        return x ^ (x >> 31);",
		  "    }",
		  "    size_t operator()(uint64_t x) const {",
		  "        static const uint64_t FIXED_RANDOM = std::chrono::steady_clock::now().time_since_epoch().count();",
		  "        return splitmix64(x + FIXED_RANDOM);",
		  "    }",
		  "    template<typename L, typename R>",
		  "    size_t operator()(std::pair<L,R> const& Y) const{",
		  "        static const uint64_t FIXED_RANDOM = std::chrono::steady_clock::now().time_since_epoch().count();",
		  "        return splitmix64(Y.first * 31ull + Y.second + FIXED_RANDOM);",
		  "    }",
		  "};",
		  "// key should be integer type",
		  "template <typename T1, typename T2> ",
		  "using safe_map = unordered_map<T1, T2, custom_hash>;",
		  ""
		],
		"description": "safe_unordered_hash_map"
	}

	// Some quick printing...

	"include multiple_tests": {
		"prefix": "tests",
		"body": [
		  "int tests;",
		  "cin >> tests;",
		  "",
		  "while(tests-- > 0){",
		  "    $0",
		  "}"
		],
		"description": "include multiple_tests"
	}

	"print YES ": {
		"prefix": "pyes;",
		"body": [
		  "cout << \"YES\" << nl;"
		],
		"description": "print YES "  
	}

	"print NO ": {
		"prefix": "pno;",
		"body": [
		  "cout << \"NO\" << nl;"
		],
		"description": "print NO "  
	}

	"print answer with case no.": {
		"prefix": "print-case#",
		"body": [
		  "cout << \"Case #\" << tc << \": \"; ",
		  "",
		  "$0"
		],
		"description": "print answer with case no."
	}

	"N size Vector Input": {
		"prefix": "nvecint",
		"body": [
		  "int n;",
		  "cin >> n;",
		  "vector<int64_t> a(n);",
		  "    ",
		  "for (int i = 0; i < n; i++) {",
		  "    cin >> a[i];",
		  "}"
		  "",
		  "",
		],
		"description": "N size Vector Input"
	}

	"Declaring and reading N pair wise vector": {
		"prefix": "npairs",
		"body": [
		  "int n;",
		  "cin >> n;",
		  "vector<pair<int, int>> a(n);    ",
		  "int x, y;",
		  "",
		  "for (int i = 0; i < n; i++) {",
		  "    cin >> x >> y;",
		  "    a[i] = {x, y};",
		  "}",
		  "",
		],
		"description": "Declaring and reading n pair wise vector"
	}

	"N Size String input": {
		"prefix": "nstring",
		"body": [
		  "int n; string s;",
		  "cin >> n >> s;",
		  "",
		  "",
		],
		"description": "N Size String input"
	}

	// STL and Worlflow

	"For Loop For Repetition": {
		"prefix": "rep",
		"body": [
		  "for (int i = 0; i < $1; i++) {",
		  "    $0",
		  "}",
		],
		"description": "For Loop For Repetition"
	}

	"iterative traversal": {
		"prefix": "trav",
		"body": [
		  "for (auto &a : $1){",
		  "    $0",
		  "}"
		],
		"description": "iterative traversal"
	}

	"Begin -> End all Itetrations": {
		"prefix": "all",
		"body": [
		  "$0.begin(), $0.end()"
		],
		"description": "Begin -> End all Itetrations"
	}

	"integer vector": {
		"prefix": "vecint",
		"body": [
		  "vector<int64_t> $0"
		],
		"description": "integer vector"
	}

	"2D vector": {
		"prefix": "2vecint",
		"body": [
		  "vector<vector<int64_t>> $0"
		],
		"description": "vector of vectors"
	}

	"3D vector": {
		"prefix": "3vecint",
		"body": [
		  "vector<vector<vector<int64_t>>> $0"
		],
		"description": "vector of vectors of vectors"
	}

	"read stl": {
		"prefix": "readvector-stl",
		"body": [
		  "",
		  "for (int i = 0; i < n; i++) {",
		  "    cin >> $0[i];",
		  "}",
		  ""
		],
		"description": "read stl"
	}

	"printing vector using loop": {
		"prefix": "print-vector",
		"body": [
		  "",
		  "for(int i = 0; i < (int)$0.size(); i++){",
		  "	cout << $0[i] << \" \";",
		  "}",
		  "cout << '\\n';",
		  ""
		],
		"description": "printing vector using loop"
	}



	//////////////////////////////////////////////////////////////////  CODE - Mathematical functions  ///////////////////////////////////////////////////////////////

	"GCD and LCM": {
		"prefix": "include-gcd-lcm",
		"body": [
		  "",
		  "int gcd(int a, int b){",
		  "    if(b == 0) {",
		  "        return a;",
		  "    }",
		  "",
		  "    return gcd(b, a % b);",
		  "}",
		  "",
		  "int lcm(int a, int b){",
		  "    int hcf = gcd(a, b);",
		  "",
		  "    return (a / hcf) * (b / hcf) * hcf;",
		  "}",
		  ""
		],
		"description": "GCD and LCM"
	}

	"Ceil Division of two integers": {
		"prefix": "include-ceil-division",
		"body": [
		  "",
		  "int ceil_division(int a, int b){",
		  "    return a / b + ((a % b) != 0);",
		  "}",
		  ""
		],
		"description": "Ceil Division of two integers"
	}

	"compute factorial of n": {
		"prefix": "include-factorial",
		"body": [
		  "",
		  "int fact(int n){",
		  "    return(n == 1 ? n : n * fact(n - 1));",
		  "}",
		  ""
		],
		"description": "compute factorial of n"
	}


	//////////////////////////////////////////////////////////////////  CODE - Snippets and Fucntions  ///////////////////////////////////////////////////////////////

	"Rotating string by element from 1.->n-1 or from n-1.->1": {
		"prefix": "rotate-string-left-right",
		"body": [
		  "",
		  "void rotateRight(string &s, int k){",
		  "    int n = s.size();",
		  "",
		  "    for(int time = 0; time < k; time++){",
		  "        string newly = \"\";",
		  "        for(int i = 1; i < n; i++){",
		  "            newly += s[i];",
		  "        }",
		  "        newly += s[0];",
		  "        s = newly;",
		  "    }",
		  "}",
		  "",
		  "void rotateLeft(string &s, int k){",
		  "    int n = s.size();",
		  "",
		  "    for(int time = 0; time < k; time++){",
		  "        string newly = \"X\";",
		  "        newly[0] = s[n - 1];",
		  "        for(int i = 0; i < n - 1; i++){",
		  "            newly += s[i];",
		  "        }",
		  "        s = newly;",
		  "    }",
		  "}",
		  ""
		],
		"description": "Rotating string by element from 1.->n-1 or from n-1.->1"
	}

	"integer to vector convertion": {
		"prefix": "include-integer-to-vector",
		"body": [
		  "",
		  "vector<int> int_to_vector(int n){",
		  "    vector<int> ans;",
		  "    ",
		  "    while(n != 0){",
		  "        int ld = n % 10;",
		  "        ans.push_back(ld);",
		  "        n /= 10;",
		  "    }",
		  "",
		  "    reverse(ans.begin(), ans.end());",
		  "    return ans;",
		  "}",
		  ""
		],
		"description": "integer to vector convertion"
	}


	"to check if string is palindrome or not": {
		"prefix": "include-isPalindrome",
		"body": [
		  "",
		  "bool isPalindrome(string &s){",
		  "    int i = 0, j = s.size() - 1;",
		  "    while(i < j){",
		  "        if(s[i] == s[j]){",
		  "            i++;",
		  "            j--;",
		  "        }",
		  "        else{",
		  "            return false;",
		  "        }",
		  "    }",
		  "    return true;",
		  "}",
		  ""
		],
		"description": "to check if string is palindrome or not"
	}

	"distinct elements in vector": {
		"prefix": "include-isdistincevector",
		"body": [
		  "",
		  "bool isDistinctVector(vector<int> &arr){",
		  "    int n = arr.size();",
		  "",
		  "    for(int i = 0; i < n; i++){",
		  "        for(int j = i + 1; j < n; j++){",
		  "            if(arr[i] == arr[j]){",
		  "                return false;",
		  "            }",
		  "        }",
		  "    }",
		  "    return true;",
		  "}",
		  ""
		],
		"description": "distinct elements in vector"
	}

	"Boolean values to check vowel or consonants": {
		"prefix": "include-isvowel-isconsonant",
		"body": [
		  "",
		  "bool isVowel(char c){",
		  "    if (c=='a'||c=='e'||c=='i'||c=='o'||c=='u'||",
		  "       c=='A'||c=='E'||c=='I'||c=='O'||c=='U'){",
		  "",
		  "        return true;",
		  "    }",
		  "",
		  "    return false;",
		  "}",
		  "",
		  "bool isConsonant(char c){",
		  "    return (isVowel(c) ? false : true);",
		  "}",
		  ""
		],
		"description": "Boolean values to check vowel or consonants"
	}
	  
	"printing out std::vector": {
	"prefix": "include-output-vector",
	"body": [
		" ",
		"template<typename T_vector>",
		"void output_vector(const T_vector &v, bool add_one = false, int start = -1, int end = -1) {",
		"    if (start < 0) start = 0;",
		"    if (end < 0) end = int(v.size());",
		" ",
		"    for (int i = start; i < end; i++)",
		"        cout << v[i] + (add_one ? 1 : 0) << (i < end - 1 ? ' ' : '\\n');",
		"}",
		"",
	],
	"description": "printing out std::vector"
	}
	
	"NxM STD::VECTOR Input ": {
		"prefix": "nmmatint",
		"body": [
		  "int n, m;",
		  "cin >> n >> m;",
		  "vector<vector<int64_t>> a(n, vector<int64_t> (m));",
		  "",
		  "for (int i = 0; i < n; i++) {",
		  "    for (int j = 0; j < m; j++) {",
		  "        cin >> a[i][j];",
		  "    }",
		  "}"
		],
		"description": "NxM STD::VECTOR Input "
	}

	"computer all permutations of elements in an array / vector": {
		"prefix": "include-compute-permutations",
		"body": [
		  "",
		  "void compute_permutations(vector<int64_t> a, int l, int r, vector<vector<int64_t>> &ans) ",
		  "{ ",
		  "    if (l == r) {",
		  "        ans.push_back(a);",
		  "    }",
		  "    else",
		  "    { ",
		  "        for (int i = l; i <= r; i++) { ",
		  "            swap(a[l], a[i]); ",
		  "            compute_permutations(a, l+1, r, ans); ",
		  "            swap(a[l], a[i]); ",
		  "        } ",
		  "    } ",
		  "}",
		  ""
		],
		"description": "computer all permutations of elements in an array / vector"
	}

	"count total digits in integer": {
		"prefix": "include-count-digits-in-integer",
		"body": [
		  "",
		  "int count_digits_in_int(int n){",
		  "    int ans = 0;",
		  "",
		  "    while(n != 0){",
		  "        int ld = n % 10;",
		  "        ans++;",
		  "        n /= 10;",
		  "    }",
		  "    return ans;",
		  "}",
		  ""
		],
		"description": "count total digits in integer"
	}

	"PrefixSum and SuffixSum": {
		"prefix": "include-prefixsum-suffixsum",
		"body": [
		  "",
		  "vector<int64_t> prefixSum(vector<int64_t> &a){",
		  "    int n = a.size();",
		  "",
		  "    vector<int64_t> ans(n);",
		  "    ans[0] = a[0];",
		  "    ",
		  "    for (int i = 1; i < n; i++) {",
		  "        ans[i] = ans[i - 1] + a[i];",
		  "    }",
		  "",
		  "    return ans;",
		  "}",
		  "",
		  "vector<int64_t> SuffixSum(vector<int64_t> &a){",
		  "    int n = a.size();",
		  "",
		  "    vector<int64_t> ans(n);",
		  "    ans[n - 1] = a[n - 1];",
		  "",
		  "    for(int i = n - 2; i >= 0; i--){",
		  "        ans[i] = ans[i+1] + a[i];",
		  "    }",
		  "",
		  "    return ans;",
		  "}",
		  ""
		],
		"description": "PrefixSum and SuffixSum"
	}
}